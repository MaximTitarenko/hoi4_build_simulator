# =====================================================
# мини-модуль: 

# имитация части функционала datetime, 
# но без высокосных лет (!! как оказалось - согласно механике игры)

# для ~date используется формат: 
# (y,m,d) - tuple
# =====================================================

# -----------------------------------------------------
from itertools import chain

MONTH_DAYS = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}
# -----------------------------------------------------

def get_days_total(date):
    # общее количество дней от начала НЭ для даты = date
    
    year, month, day = date
    days = 365 * year
    for month in range(1, month):
        days += MONTH_DAYS[month]
    days+= day
    return days
    
# -----------------------------------------------------

def get_days_diff(date_1, date_2):
    # разница в днях даты date_2 относительно даты date_1
    
    days_1 = get_days_total(date_1)
    days_2 = get_days_total(date_2)
    return days_2 - days_1
    
# -----------------------------------------------------

def add_days(date, days):
    # дата, получаемая при добавлении к дате = date количества дней = days
  
    year, month, day = date
    
    # -----------------------------------------------------
    # устанавливаем - какой будет год:
    # -----------------------------------------------------
    
    while days > 365:
        days -= 365
        year += 1

    if get_days_total((0, month, day)) + days > 365:
        year += 1
        
    # -----------------------------------------------------
    # остальная часть - дорабатываем месяцы, дни:
    # -----------------------------------------------------
    
    month_list = list(chain(range(month, 13), range(1, 13)))  

    for month_temp in month_list:

        if days + day > MONTH_DAYS[month_temp]: # => как минимум следующий месяц
            days -= MONTH_DAYS[month_temp]

        else: # => определили месяц - см (*)
            day += days
            month = month_temp
            break
        
    return year, month, day 
 
# (*) замечание:
    # при этом days может быть отрицательным, но если условия выше хоть раз страбатывали, из них следует: 
    # day > month_days - days => day > - days (обновленного) 
    # => если days - отрицательное, то day > abs(days), и мы никогда не получим в day += days отрицательное значение;
    # если же условие выше не срабатывало, то все элементарно, при этом - выводы те же    
 
# =====================================================
def testing():
    pass

if __name__ == '__main__':
    testing()
# =====================================================


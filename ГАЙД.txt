=====================================================
ПОДРОБНЫЙ ГАЙД ПО СИМУЛЯТОРУ
(для дополнительной информации - см также файл 'simulator.py')
=====================================================

=====================================================
ПРИНЦИП РАБОТЫ ПРОГРАММЫ: 
=====================================================

1. В программе существует 3 класса симуляторов:
    - BuildSimulator - базовый симулятор
    - BuildSimMaxMilitary - симулятор для максимизации военных заводов
    - BuildSimInfrEfficiency - симулятор для оценки эффективности строительства инфраструктуры
2. Каждый симулятор имеет свои приложения (см ниже)

Цель пользователя программы - получить результат работы некоторого приложения.

Чтобы вызвать конкретное приложение, нужно сделать 2 шага:

ШАГ 1. Создать определенный симулятор.
формат:
=====================================================
имя_симулятора = КлассСимулятора(стартовые_условия)
=====================================================

ШАГ 2. Вызвать приложение созданного симулятора 
формат:
=====================================================
имя_симулятора.имя_приложения(параметры_приложения)
=====================================================

Собственно, это вся схема.
Далее: какие стартовые условия и параметры можно использовать.

=====================================================
ОПИСАНИЕ И ФОРМАТ ВСЕХ ПАРАМЕТРОВ, ВВОДИМЫХ ПОЛЬЗОВАТЕЛЕМ:
=====================================================

список доступных стран:
'СССР', 'ГЕРМАНИЯ', 'ЯПОНИЯ', 'ИТАЛИЯ', 'ФРАНЦИЯ', 'США', 'ВБ'

-----------------------------------------------------
1. параметры симуляторов:
-----------------------------------------------------

- BuildSimulator(стартовые_условия)
    стартовые_условия:
        - либо страна из списка (см *замечание)
        - либо стартовые фабрики и заводы, формат: (см *замечание)
        {'civ':количество_фабрик, 'mil':количество_заводов}
        
- BuildSimMaxMilitary(стартовые_условия)
    стартовые_условия:
        - либо страна из списка
        - либо стартовые фабрики и заводы, формат:
        {'civ':количество_фабрик, 'mil':количество_заводов}
        
- BuildSimInfrEfficiency(стартовые_условия)
    стартовые_условия:
        - страна из списка (опционально - можно пропустить)

примеры:
симулятор_1 = BuildSimulator('СССР')
симулятор_2 = BuildSimulator({'civ':12, 'mil':10})
симулятор_3 = BuildSimInfrEfficiency()

-----------------------------------------------------
2. параметры приложений симуляторов:
-----------------------------------------------------

-----------------------------------------------------
доступные приложения симуляторов:
-----------------------------------------------------

- BuildSimulator:

    1) симуляция строительства по заданным параметрам:
    - build_sim(build_order, laws_timeline, civ_trade_av, date_end)
-----------------------------------------------------

- BuildSimMaxMilitary:

    1) симуляция строительства по заданным параметрам:
    - build_sim(civ_num_to_build, infr_av, laws_timeline, civ_trade_av, date_end)
    
    2) график количества построенных заводов к определенной дате по набору количества построенных фабрик:
    - visualize_efficiency(civ_num_to_build_list, infr_av, laws_timeline, civ_trade_av, date_end)
    
    3) график экстремума построенных заводов к определенной дате по числу построенных фабрик:
    - find_mil_extremum(infr_av, laws_timeline, civ_trade_av, date_end)      
-----------------------------------------------------

- BuildSimInfrEfficiency:
    
    1) симуляция строительства по заданным параметрам:
    - build_sim(infr_initial, infr_up, laws_timeline)
    
    2) график границы окупаемости строительства инфраструктуры для ячеек данной страны:
    - visualize_equilibrium(infr_up, laws_timeline)
    
    3) определение - окупается ли строительство инфраструктуры в данной конкретной ячейке
    - is_cell_profitable(cell, infr_up, laws_timeline)
    
    4) определение - окупается ли строительство инфраструктуры для какой-либо из ячеек в данной стране (демо-версия):
    - is_any_cell_profitable(infr_up, laws_timeline)

-----------------------------------------------------
параметр laws_timeline:
-----------------------------------------------------

laws_timeline - очередь изменения законов/технологий/советников, влияющих на бонусы строительства и штраф ТНП

формат:
[
    [ (год, месяц, день), ['имя_нового_закона_1', ...] ],
    ...
]

доступные имена законов/технологий/советников: 
(подробнее - см LAWS_MODIFICATORS в файле 'simulator.py')
-----------------------------------------------------
'Обезоруженная_нация', 'Только_добровольцы', 'Ограниченный_призыв', 
'Расширенный_призыв', 'Обязательная_служба', 'Все_взрослые', 'Всех_под_ружье',
'Свободная_торговля', 'Приоритет_экспорт', 'Ограниченный_экспорт', 'Закрытая_экономика',
'Ненарушаемая_изоляция', 'Изоляция', 'Гражданская_экономика', 
'Ранняя_мобилизация', 'Частичная_мобилизация', 'Военная_экономика', 'Всеобщая_мобилизация',

'Строительство_1', 'Строительство_2', 'Строительство_3', 'Строительство_4', 'Строительство_5',

'Капитан_индустрии', 'Капитан_индустрии_уволен',
'Военный_магнат','Военный_магнат_уволен'
-----------------------------------------------------

пример:
laws_timeline = [
                    [(1936, 1, 1), ['Только_добровольцы', 'Приоритет_экспорт', 'Гражданская_экономика']],
                    [(1936, 3, 11), ['Свободная_торговля']]
                ]

-----------
*замечание:
-----------

1) Если стартовые_условия для симулятора - страна из списка, то:
в таком варианте управление симулятором упрощено, тк стартовые значения заводов, фабрик и законов уже учтены для указанной страны. 

В этом случае в таймингах изменения законов НЕ НУЖНО указывать стартовый набор законов.
То есть, тайминги должны начинаться с даты позже (1936, 1, 1)

например:
=====================================================
симулятор_италия = BuildSimMaxMilitary('ИТАЛИЯ')

тайминги_италия = [
                    [(1936, 3, 11), ['Свободная_торговля']], 
                    [(1936, 6, 27), ['Строительство_1']], 
                    # ... 
                  ]
=====================================================

2) Если стартовые_условия для симулятора - не страна из списка, то: 
Тайминги изменения законов ОБЯЗАТЕЛЬНО должны начинаться с с 1го дня игры: (1936, 1, 1)

например:
=====================================================
производственные_мощности_старт = {'civ':12, 'mil':10}
симулятор_тест = BuildSimMaxMilitary(производственные_мощности_старт)

тайминги_тест = [
                    [(1936, 1, 1), ['Только_добровольцы', 'Приоритет_экспорт', 'Гражданская_экономика']],
                    [(1936, 3, 11), ['Свободная_торговля']], 
                    [(1936, 6, 27), ['Строительство_1']], 
                    # ... 
                  ]
=====================================================

-----------------------------------------------------
параметр build_order: 
(используется только в симуляторе BuildSimulator)
-----------------------------------------------------

build_order - очередь строительства

формат: 
[ ['имя_ячейки', 'объект_для_постройки', количество], ... ]

имена ячеек:
- произвольная строка, например: 'МояЯчейка'

имена объектов для постройки:
'infr' - инфраструктура
'civ' - гражданская фабрика
'mil' - военный завод

примеры:
build_order = [['Москва', 'infr', 2], ['Сталинград', 'civ', 2], ['Харьков', 'mil', 2], ['Москва', 'mil', 1]]
build_order = [['Минас-Тирит', 'mil', 5], ['Винтерфелл', 'mil', 4]] 
build_order = [['Whatever', 'infr', 2], ['Nevermind', 'civ', 7]]

-----------------------------------------------------
прочие параметры:
-----------------------------------------------------

civ_trade_av - средняя разница фабрик от торговли
пример: 
civ_trade_av = 10

date_end - дата принудительного завершения симуляции (год, месяц, день)
пример:
date_end = (1941, 6, 22)

civ_num_to_build - количество фабрик для постройки (симулятор BuildSimMaxMilitary)
пример:
civ_num_to_build = 15

civ_num_to_build_list - набор количества фабрик для постройки (симулятор BuildSimMaxMilitary)
пример:
civ_num_to_build_list = [0, 10, 20]

infr_av - средняя инфраструктура ячеек, в которых ведется строительство (симулятор BuildSimMaxMilitary)
пример:
infr_av = 6

infr_initial - изначальная инфраструктура ячеек (симулятор BuildSimInfrEfficiency)
пример:
infr_initial = 4

infr_up - поднятие уровня инфраструктуры, относительно которого оцениваем окупаемость (симулятор BuildSimInfrEfficiency)
пример:
infr_up = 2

=====================================================
ЯЧЕЙКИ СТРОИТЕЛЬСТВА:
=====================================================

В симуляторе можно создавать ячейки строительства, используя класс Cell.

формат:
=====================================================
новая_ячейка = Cell(параметры_ячейки)
=====================================================

параметры ячейки:
- name - имя ячейки - 'любой_текст' (кроме начинающегося с 'generic_' - это пространство имен зарезервировано под часть приложений)
- infrastructure - инфраструктура ячейки - число от 0 до 10
- obj_available - количество доступных клеток для строительства в ячейке - число >= 0
- country - 'любой_текст'

пример создания ячейки:
=====================================================
новая_ячейка = Cell('Винтерфелл', 3, 5, 'Королевство_Севера' )
=====================================================

------------
**замечание:
------------

Строительство в симуляторе всегда происходит в некоторой ячейке.
В то же время, в данной версии программы изначально заданы всего несколько ячеек с реальными игровыми данными.
(все стартовые ячейки - см в константах CELLS_DICT и CELLS_DICT_DEMO в файле 'simulator.py')
Остальные ячейки генерируются в процессе работы приложений.

Поэтому, например, метод is_any_cell_profitable, 
определяющий - есть ли хоть одна окупаемая ячейка для данной страны, 
работает на данный момент только в демо-версии, а именно - для ГЕРМАНИИ.

Можно расширить функционал метода до полноценного, но для этого требуется переписать данные всех ячеек в игре. 
Или как минимум - всех ячеек мажоров.
Что, очевидно, довольно хлопотно.

Кроме того, даже в ограничениях нынешнего вида функционал программы позволяет качественно ответить на все поставленные в ней вопросы.

# =====================================================
# ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ ДЛЯ ПОЛЬЗОВАТЕЛЯ:
# =====================================================

# -----------------------------------------------------
# КОММЕНТАРИИ:
# -----------------------------------------------------

# текст, подобный данному - следующий за знаком '#',
# является комментарием и не влияет на выполнение кода программы в файлах с расширением 'py'

# чтобы быстро закомментировать/раскомментировать строку, 
# можно использовать сочетание клавиш:
# Ctrl + / 

# -----------------------------------------------------
# BuildSimulator.printout - ПАРАМЕТР ПЕЧАТИ В КОНСОЛЬ:
# переменная отвечающая за вид печати (подробная/краткая) событий симуляции
# (при необходимости - раскомментируйте и используйте в файле 'main.py' нужную строку)
# -----------------------------------------------------

# BuildSimulator.printout = True # подробная печать событий в приложениях build_sim
# BuildSimulator.printout = False # краткая печать событий (установлена по умолчанию)
# =====================================================

=====================================================
КОД ДЛЯ КОНКРЕТНЫХ ПРИМЕРОВ:
=====================================================

# -----------------------------------------------------
# пример 1.
# (график количества построенных заводов к определенной дате по набору количества построенных фабрик)
# -----------------------------------------------------

ussr_sim = BuildSimMaxMilitary('СССР') # создание симулятора

civ_num_to_build_list = [0, 10, 20, 30] # список количества фабрик для постройки

infr_av = 6 # средняя инфраструктура
civ_trade_av = 10 # среднее количество фабрик от торговли
date_end = (1941,1,1) # дата принудительного завершения симуляции (год, месяц, день)

laws_timeline = [ # формат laws_timeline для определенной страны - из country_list - см *замечание
                  [(1936, 3, 11), ['Свободная_торговля']], 
                  [(1936, 6, 27), ['Строительство_1']], 
                  [(1937, 4, 22), ['Строительство_2']], 
                  [(1937, 12, 1), ['Военная_экономика']],
                  [(1939, 4, 15), ['Строительство_3']] 
                ]

# запуск приложения симулятора по заданным параметрам:    
ussr_sim.visualize_efficiency(civ_num_to_build_list, infr_av, laws_timeline, civ_trade_av, date_end)

# -----------------------------------------------------
# пример 2.
# (график экстремума построенных заводов к определенной дате по числу построенных фабрик)
# -----------------------------------------------------

ussr_sim = BuildSimMaxMilitary('СССР') # создание симулятора

infr_av = 6 # средняя инфраструктура
civ_trade_av = 10 # среднее количество фабрик от торговли
date_end = (1941,1,1) # дата принудительного завершения симуляции (год, месяц, день)

laws_timeline = [ # формат laws_timeline для определенной страны - из country_list - см *замечание
                  [(1936, 3, 11), ['Свободная_торговля']], 
                  [(1936, 6, 27), ['Строительство_1']], 
                  [(1937, 4, 22), ['Строительство_2']], 
                  [(1937, 12, 1), ['Военная_экономика']],
                  [(1939, 4, 15), ['Строительство_3']] 
                ]

# запуск приложения симулятора по заданным параметрам:      
ussr_sim.find_mil_extremum(infr_av, laws_timeline, civ_trade_av, date_end)

# -----------------------------------------------------
# пример 3.
# (график границы окупаемости строительства инфраструктуры для ячеек данной страны)
# -----------------------------------------------------

ger_sim = BuildSimInfrEfficiency('ГЕРМАНИЯ') # создание симулятора

infr_up = 1 # поднятие уровня инфраструктуры, относительно которого оцениваем окупаемость

laws_timeline = [ # формат laws_timeline для определенной страны - из country_list - см *замечание
                  [(1936, 3, 11), ['Свободная_торговля']], 
                  [(1936, 6, 27), ['Строительство_1']], 
                  [(1937, 4, 22), ['Строительство_2']], 
                  [(1937, 12, 1), ['Военная_экономика']],
                  [(1939, 4, 15), ['Строительство_3']] 
                ]

# запуск приложения симулятора по заданным параметрам:    
ger_sim.visualize_equilibrium(infr_up, laws_timeline)

# -----------------------------------------------------
# пример 4.
# (определение - окупается ли строительство инфраструктуры в данной конкретной ячейке)
# -----------------------------------------------------

new_sim = BuildSimInfrEfficiency() # создание симулятора

# создание ячейки, окупаемость которой будем оценивать:
new_cell = Cell('Мозель', infrastructure=7, obj_available=11, country='ГЕРМАНИЯ') 

infr_up = 1 # поднятие уровня инфраструктуры, относительно которого оцениваем окупаемость

laws_timeline = [ # формат laws_timeline для неопределенной страны - см *замечание
                  [(1936, 1, 1), ['Ограниченный_призыв', 'Ограниченный_экспорт', 'Частичная_мобилизация']],
                  [(1936, 3, 11), ['Свободная_торговля']], 
                  [(1936, 6, 27), ['Строительство_1']], 
                  [(1937, 4, 22), ['Строительство_2']], 
                  [(1937, 12, 1), ['Военная_экономика']],
                  [(1939, 4, 15), ['Строительство_3']] 
                ]

# запуск приложения симулятора по заданным параметрам:  
new_sim.is_cell_profitable(new_cell, infr_up, laws_timeline)  

# -----------------------------------------------------
# пример 5.
# (определение - окупается ли строительство инфраструктуры для какой-либо из ячеек в данной стране) 
# (демо-версия - см **замечание - работает только для ГЕРМАНИИ)
# -----------------------------------------------------

ger_sim = BuildSimInfrEfficiency('ГЕРМАНИЯ') # создание симулятора

infr_up = 1 # поднятие уровня инфраструктуры, относительно которого оцениваем окупаемость

laws_timeline = [ # формат laws_timeline для определенной страны - из country_list - см *замечание
                  [(1936, 3, 11), ['Свободная_торговля']], 
                  [(1936, 6, 27), ['Строительство_1']], 
                  [(1937, 4, 22), ['Строительство_2']], 
                  [(1937, 12, 1), ['Военная_экономика']],
                  [(1939, 4, 15), ['Строительство_3']] 
                ]
                
# запуск приложения симулятора по заданным параметрам:  
ger_sim.is_any_cell_profitable(infr_up, laws_timeline)

# -----------------------------------------------------
# пример 6.
# (симуляция строительства по произвольной очереди строительства) 
# -----------------------------------------------------

BuildSimulator.printout = True # устанавливаем формат подробной печати событий в консоль

ussr_sim = BuildSimulator('СССР') # создание симулятора

civ_trade_av = 10 # среднее количество фабрик от торговли

laws_timeline = [ # формат laws_timeline для определенной страны - из country_list - см *замечание
                  [(1936, 3, 11), ['Свободная_торговля']], 
                  [(1936, 6, 27), ['Строительство_1']], 
                  [(1937, 4, 22), ['Строительство_2']], 
                  [(1937, 12, 1), ['Военная_экономика']],
                  [(1939, 4, 15), ['Строительство_3']] 
                ]

# создание очереди стрительства:
build_order = [['Москва', 'infr', 2], ['Харьков', 'civ', 3], ['Винтерфелл', 'mil', 4]] 

# запуск приложения симулятора по заданным параметрам:  
ussr_sim.build_sim(build_order, laws_timeline, civ_trade_av)

BuildSimulator.printout = False # возвращаем формат краткой печати событий

# -----------------------------------------------------


